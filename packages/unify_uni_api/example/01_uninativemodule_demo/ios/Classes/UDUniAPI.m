// =================================================
// Autogenerated from Unify 3.0.4, do not edit directly.
// =================================================

#import "UDUniAPI.h"
#import <dlfcn.h>
#import <mach-o/getsect.h>
#import "UDUniCallbackDispatcher.h"
static NSMutableDictionary<NSString *, NSObject *> *UniSubscriberInstanceCache;//注册代理类实例

/// Subscriber实例存入缓存
/// @param clsName 实例类名
/// @param Obj 实例
static void _writeSubscriberToCache(NSString *clsName,id Obj) {
    if (Obj && clsName) {
        if (UniSubscriberInstanceCache[clsName] == nil) {
            UniSubscriberInstanceCache[clsName] = Obj;
        }
    }
}

/// 通过类名查询Subscriber实例
/// @param clsName Adapter类名称
static id _readSubscriberInCache(NSString *clsName) {
    if (!clsName) return nil;
    NSDictionary *dic = [UniSubscriberInstanceCache copy];
    return dic[clsName];
}


@implementation UDUniAPI

+ (void)init:(NSObject<FlutterBinaryMessenger>* _Nonnull)binaryMessenger {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        [self loadExportClass];
        [UDUniCallbackDispatcher init: binaryMessenger];
    });
}

+ (void)loadExportClass {
  static int __UNIAPI = 0;
  static dispatch_once_t onceToken;
  dispatch_once(&onceToken, ^{
    UniSubscriberInstanceCache = [NSMutableDictionary new];

    Dl_info info;
    dladdr(&__UNIAPI, &info);

#ifndef __LP64__
    const struct mach_header *mhp = (struct mach_header*)info.dli_fbase;
    unsigned long size = 0;
    uint32_t *memory = (uint32_t*)getsectiondata(mhp, "__DATA", "ud_uni_api", & size);
#else /* defined(__LP64__) */
    const struct mach_header_64 *mhp = (struct mach_header_64*)info.dli_fbase;
    unsigned long size = 0;
    uint64_t *memory = (uint64_t*)getsectiondata(mhp, "__DATA", "ud_uni_api", & size);
#endif /* defined(__LP64__) */

    for(int idx = 0; idx < size/sizeof(void*); ++idx){
      char *string = (char*)memory[idx];
      NSString *clsName = [NSString stringWithUTF8String:string];

      id obj = _readSubscriberInCache(clsName);
      if (!obj) {
        _writeSubscriberToCache(clsName,[NSClassFromString(clsName) new]);
      }
    }
  });
}

/// 慢速查找, 用于用户传入protocol的场景。多用于用户开发的Plugin插件中
/// @param protocolName 协议名称
+ (id)slowLookup:(NSString *)protocolName {
  NSDictionary *cache = [UniSubscriberInstanceCache copy];
  NSArray *subscribers = cache.allValues;
  Protocol *p = NSProtocolFromString(protocolName);
  id subscriber;
  for (id obj in subscribers) {
    if ([obj conformsToProtocol:p]) {
      subscriber = obj;
      break;
    }
  }
  return subscriber;
}

+ (id)get:(NSString *)className {
  id value = _readSubscriberInCache(className);
  if (!value) {
    value = [self slowLookup:className];
  }
  return value;
}

@end
