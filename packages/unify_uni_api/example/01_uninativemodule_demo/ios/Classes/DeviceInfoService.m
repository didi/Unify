// =================================================
// Autogenerated from Unify 3.0.4, do not edit directly.
// =================================================

#import "DeviceInfoService.h"
#import <Flutter/Flutter.h>

#import "DeviceInfoModel.h"



static NSDictionary * mapClone(NSDictionary *dic);
static NSArray * listClone(NSArray *list) {
    NSMutableArray *newList = NSMutableArray.new;
    if ([list isKindOfClass:[NSNull class]]) return [newList copy];
    for (id value in list) {
        [newList addObject:
            [value isKindOfClass:[NSArray class]]? listClone(value) :
            [value isKindOfClass:[NSDictionary class]]?mapClone(value) :
            [value isKindOfClass:[DeviceInfoModel class]]? [value toMap] :
            value];
    }
  
    return [newList copy];
}
    
static NSDictionary * mapClone(NSDictionary *dic) {
  NSMutableDictionary *newDic = NSMutableDictionary.new;
  if ([dic isKindOfClass:[NSNull class]]) return [newDic copy];
  for (id key in dic) {
      id value = [dic objectForKey:key];
      newDic[key] =
          [value isKindOfClass:[NSArray class]]? listClone(value) :
          [value isKindOfClass:[NSDictionary class]]? mapClone(value) :
          [value isKindOfClass:[DeviceInfoModel class]]? [value toMap] :
          value;
  }
  return  [newDic copy];;
}
    
static NSDictionary * mapConvert(NSDictionary *dic, NSArray *generics, int depth);
static NSArray * listConvert(NSArray *list, NSArray *generics, int depth) {
        NSMutableArray *newList = NSMutableArray.new;
        if ([list isKindOfClass:[NSNull class]]) return [newList copy];
        for (id value in list) {
            [newList addObject:
                [generics[depth] isEqual:@"NSArray"]? listConvert(value, generics, depth+1) :
                [generics[depth] isEqual:@"NSDictionary"]? mapConvert(value, generics, depth+1) :
                [generics[depth] isEqual:@"DeviceInfoModel"]? [DeviceInfoModel fromMap: value] :
                value];
        }
      
        return [newList copy];
}

static NSDictionary * mapConvert(NSDictionary *dic, NSArray *generics, int depth) {
  NSMutableDictionary *newDic = NSMutableDictionary.new;
  if ([dic isKindOfClass:[NSNull class]]) return [newDic copy];
  for (id key in dic) {
      id value = [dic objectForKey:key];
      newDic[key] =
      [generics[depth] isEqual:@"NSArray"]? listConvert(value, generics, depth+1) :
      [generics[depth] isEqual:@"NSDictionary"]? mapConvert(value, generics, depth+1) :
      [generics[depth] isEqual:@"DeviceInfoModel"]? [DeviceInfoModel fromMap: value] :
      value;
  }
  return  [newDic copy];;
}

static NSDictionary<NSString*, id>* wrapResult(NSObject* result, FlutterError* error) {
    NSDictionary *errorDict = (NSDictionary *)[NSNull null];
    if (error) {
        errorDict = @{
            @"code": (error.code ? error.code : [NSNull null]),
            @"message": (error.message ? error.message : [NSNull null]),
            @"details": (error.details ? error.details : [NSNull null]),
            };
    }
    return @{
        @"result": (result ? result : [NSNull null]),
        @"error": errorDict,
        };
}

void DeviceInfoServiceSetup(id<FlutterBinaryMessenger> binaryMessenger, id<DeviceInfoService> api) {
    {
        FlutterBasicMessageChannel *channel =
            [FlutterBasicMessageChannel
                messageChannelWithName:@"com.didi.flutter.uni_api.DeviceInfoService.getDeviceInfo"
                binaryMessenger:binaryMessenger];
        if (api) {
            [channel setMessageHandler:^(id _Nullable message, FlutterReply reply) {
                [api getDeviceInfo:^(DeviceInfoModel* result) {
                    reply(wrapResult([result toMap],nil));
                }
                fail:^(FlutterError* error) {
                    reply(wrapResult(nil,error));
                }
                ];
            }];
        } else {
            [channel setMessageHandler:nil];
        }
    }
}
